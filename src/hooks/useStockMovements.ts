import { useState, useEffect } from "react";
import api from "@/services/api";

export interface StockMovement {
  id: number;
  produto_id: number;
  produto_nome: string;
  unidade_medida: string;
  categoria: string;
  tipo_movimento: "entrada" | "saida" | "ajuste";
  quantidade: number;
  motivo: string;
  valor?: number;
  documento_referencia?: string;
  data_fabricacao?: string;
  data_validade?: string;
  observacao?: string;
  data_movimentacao: string;
  quantidade_atual?: number;
}

export function useStockMovements() {
  const [movements, setMovements] = useState<StockMovement[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Carregar movimenta√ß√µes
  const loadMovements = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîÑ Carregando movimenta√ß√µes do estoque...');
      const response = await api.estoque.listarMovimentacoes();
      
      console.log('‚úÖ Resposta da API:', response);
      
      if (response && response.success) {
        setMovements(response.data || []);
        console.log(`üì¶ ${response.data?.length || 0} movimenta√ß√µes carregadas`);
      } else {
        console.error('‚ùå Resposta da API sem sucesso:', response);
        throw new Error('Erro ao carregar movimenta√ß√µes - resposta inv√°lida');
      }
    } catch (err: any) {
      console.error('‚ùå Erro ao carregar movimenta√ß√µes:', err);
      setError(err.message || 'Erro ao carregar movimenta√ß√µes');
      setMovements([]);
    } finally {
      setLoading(false);
    }
  };

  // Carregar movimenta√ß√µes ao montar o componente
  useEffect(() => {
    loadMovements();
  }, []);

  // Adicionar movimenta√ß√£o
  const addMovement = async (movementData: Omit<StockMovement, 'id'>) => {
    try {
      const response = await api.estoque.movimentar(movementData);
      
      if (response.success) {
        // Recarregar lista ap√≥s adicionar
        await loadMovements();
        return response;
      } else {
        throw new Error('Erro ao adicionar movimenta√ß√£o');
      }
    } catch (err) {
      console.error('Erro ao adicionar movimenta√ß√£o:', err);
      throw err;
    }
  };

  // Atualizar movimenta√ß√£o
  const updateMovement = async (id: number, movementData: Omit<StockMovement, 'id'>) => {
    try {
      const response = await api.estoque.atualizarMovimentacao(id, movementData);
      
      if (response.success) {
        // Recarregar lista ap√≥s atualizar
        await loadMovements();
        return response;
      } else {
        throw new Error('Erro ao atualizar movimenta√ß√£o');
      }
    } catch (err) {
      console.error('Erro ao atualizar movimenta√ß√£o:', err);
      throw err;
    }
  };

  // Deletar movimenta√ß√£o
  const deleteMovement = async (id: number) => {
    try {
      const response = await api.estoque.deletarMovimentacao(id);
      
      if (response.success) {
        setMovements(prev => prev.filter(m => m.id !== id));
      } else {
        throw new Error('Erro ao deletar movimenta√ß√£o');
      }
    } catch (err) {
      console.error('Erro ao deletar movimenta√ß√£o:', err);
      throw err;
    }
  };

  // Buscar movimenta√ß√£o por ID
  const getMovement = async (id: number) => {
    try {
      const response = await api.estoque.buscarMovimentacaoPorId(id);
      
      if (response.success) {
        return response.data;
      } else {
        throw new Error('Erro ao buscar movimenta√ß√£o');
      }
    } catch (err) {
      console.error('Erro ao buscar movimenta√ß√£o:', err);
      throw err;
    }
  };

  // Buscar produtos com estoque baixo
  const getLowStockProducts = async () => {
    try {
      console.log('üîÑ Buscando produtos com estoque baixo...');
      const response = await api.estoque.buscarEstoqueBaixo();
      
      if (response && response.success) {
        console.log(`üì¶ ${response.data?.length || 0} produtos com estoque baixo encontrados`);
        return response.data || [];
      } else {
        console.warn('‚ö†Ô∏è Falha ao buscar produtos com estoque baixo:', response);
        return [];
      }
    } catch (err) {
      console.error('‚ùå Erro ao buscar produtos com estoque baixo:', err);
      return []; // Retorna array vazio ao inv√©s de lan√ßar erro
    }
  };

  // Buscar relat√≥rio de estoque
  const getStockReport = async () => {
    try {
      console.log('üîÑ Buscando relat√≥rio de estoque...');
      const response = await api.estoque.relatorioEstoque();
      
      if (response && response.success) {
        console.log('‚úÖ Relat√≥rio de estoque carregado:', response.data);
        return response.data || null;
      } else {
        console.warn('‚ö†Ô∏è Falha ao buscar relat√≥rio de estoque:', response);
        return null;
      }
    } catch (err) {
      console.error('‚ùå Erro ao buscar relat√≥rio de estoque:', err);
      return null; // Retorna null ao inv√©s de lan√ßar erro
    }
  };

  return {
    movements,
    loading,
    error,
    addMovement,
    updateMovement,
    deleteMovement,
    getMovement,
    getLowStockProducts,
    getStockReport,
    reloadMovements: loadMovements
  };
}
